version: '3.4'

services:
  productservice:
    image: ${DOCKER_REGISTRY-}productservice
    build:
      context: .
      dockerfile: ProductService/Dockerfile

  mongo:
    image: mongo
    restart: always
    ports:
    - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    volumes:
    - mongo-volume:/data/db:rw

  mongo-express:
    image: mongo-express
    restart: always
    ports:
    - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example


  backofficeauthservice:
    image: ${DOCKER_REGISTRY-}backofficeauthservice
    build:
      context: .
      dockerfile: BackOfficeAuthService/BackOfficeAuthService/Dockerfile

  wsinformationservice:
    image: ${DOCKER_REGISTRY-}wsinformationservice
    build:
      context: .
      dockerfile: WebshopProductService/WSProductService/Dockerfile
      
  inventorymanagementservice:
    image: ${DOCKER_REGISTRY-}inventorymanagementservice
    build:
      context: .
      dockerfile: InventoryManagementService/Dockerfile      

  sqldatabase:
    container_name: sqldatabase
    image: microsoft/mssql-server-linux:latest
    volumes:
      - sqlserverdata:/var/opt/mssql/data/
    ports:
      - "1434:1433"
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=8jkGh47hnDw89Haq8LN2 

  webshoporderservice:
    image: ${DOCKER_REGISTRY-}webshoporderservice
    build:
      context: .
      dockerfile: WebshopOrderService/WebshopOrderService/Dockerfile

volumes:
  mongo-volume:
  images-volume:
  sqlserverdata:




