apiVersion: apps/v1
kind: Deployment
metadata:
  name: productservice-deployment
  namespace: production
  labels:
    app: productservice
spec:
  replicas: 1
  selector:
    matchLabels:
      app: productservice
  template:
    metadata:
      labels:
        app: productservice
    spec:
      containers:
      - name: productservice
        image: "us.gcr.io/wiz-builder/productservice:latest"
        imagePullPolicy: "Always"
        ports:
        - containerPort: 443
        - containerPort: 80
        volumeMounts:
        - name: images-volume
          mountPath: /app/wwwroot
      volumes:
      - name: images-volume
        persistentVolumeClaim:
          claimName: imagesvolume
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: webshopsemih-deployment
  namespace: production
  labels:
    app: webshopsemih-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: webshopsemih-deployment
  template:
    metadata:
      labels:
        app: webshopsemih-deployment
    spec:
      containers:
      - name: webshopsemih-deployment
        image: "us.gcr.io/wiz-builder/webshop:latest"
        imagePullPolicy: "Always"
        ports:
        - containerPort: 443
        - containerPort: 80
        env:
        - name: CUSTOMER
          value: "5ede61f0c738ec0001c7af4a"
        lifecycle:
          postStart:
            exec:
              command: ["/bin/sh", "-c", "envsubst < /usr/share/nginx/html/assets/env.template.js > /usr/share/nginx/html/assets/env.js"]
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: webshopdennis-deployment
  namespace: production
  labels:
    app: webshopdennis-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: webshopdennis-deployment
  template:
    metadata:
      labels:
        app: webshopdennis-deployment
    spec:
      containers:
      - name: webshopdennis-deployment
        image: "us.gcr.io/wiz-builder/webshop:latest"
        imagePullPolicy: "Always"
        ports:
        - containerPort: 443
        - containerPort: 80
        env:
        - name: CUSTOMER
          value: "5edd292f46dca8000186c457"
        lifecycle:
          postStart:
            exec:
              command: ["/bin/sh", "-c", "envsubst < /usr/share/nginx/html/assets/env.template.js > /usr/share/nginx/html/assets/env.js"]
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backoffice-deployment
  namespace: production
  labels:
    app: backoffice
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backoffice
  template:
    metadata:
      labels:
        app: backoffice
    spec:
      containers:
      - name: backoffice
        image: "us.gcr.io/wiz-builder/backoffice:latest"
        imagePullPolicy: "Always"
        ports:
        - containerPort: 443
        - containerPort: 80
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wsinformationservice-deployment
  namespace: production
  labels:
    app: wsinformationservice
spec:
  replicas: 1
  selector:
    matchLabels:
      app: wsinformationservice
  template:
    metadata:
      labels:
        app: wsinformationservice
    spec:
      containers:
      - name: wsinformationservice
        image: "us.gcr.io/wiz-builder/wsinformationservice:latest"
        imagePullPolicy: "Always"
        ports:
        - containerPort: 443
        - containerPort: 80
        volumeMounts:
        - name: images-volume
          mountPath: /app/wwwroot
      volumes:
      - name: images-volume
        persistentVolumeClaim:
          claimName: imagesvolume
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backofficeauthservice-deployment
  namespace: production
  labels:
    app: backofficeauthservice
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backofficeauthservice
  template:
    metadata:
      labels:
        app: backofficeauthservice
    spec:
      containers:
      - name: backofficeauthservice
        image: "us.gcr.io/wiz-builder/backofficeauthservice:latest"
        imagePullPolicy: "Always"
        ports:
        - containerPort: 443
        - containerPort: 80
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: inventorymanagementservice-deployment
  namespace: production
  labels:
    app: inventorymanagementservice
spec:
  replicas: 1
  selector:
    matchLabels:
      app: inventorymanagementservice
  template:
    metadata:
      labels:
        app: inventorymanagementservice
    spec:
      containers:
      - name: inventorymanagementservice
        image: "us.gcr.io/wiz-builder/inventorymanagementservice:latest"
        imagePullPolicy: "Always"
        ports:
        - containerPort: 443
        - containerPort: 80
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongo-express-deployment
  namespace: production
  labels:
    app: mongo-express
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongo-express
  template:
    metadata:
      labels:
        app: mongo-express
    spec:
      containers:
      - name: mongo-express
        image: "mongo-express"
        imagePullPolicy: "Always"
        ports:
        - containerPort: 8081
        env:
        - name: ME_CONFIG_MONGODB_ADMINUSERNAME
          value: root
        - name: ME_CONFIG_MONGODB_ADMINPASSWORD
          value: example
        - name: ME_CONFIG_SITE_BASEURL
          value: /mongo-express/
        - name: ME_CONFIG_BASICAUTH_PASSWORD 
          value: wizfontys
        - name: ME_CONFIG_BASICAUTH_USERNAME
          value: wiz
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongo-deployment
  namespace: production
  labels:
    app: mongo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongo
  template:
    metadata:
      labels:
        app: mongo
    spec:
      containers:
      - name: mongo
        image: "mongo"
        imagePullPolicy: "Always"
        ports:
        - containerPort: 27017
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          value: root
        - name: MONGO_INITDB_ROOT_PASSWORD
          value: example
        volumeMounts:
        - name: mongo-volume
          mountPath: /data/db
      volumes:
      - name: mongo-volume
        persistentVolumeClaim:
          claimName: mongovolume
---
apiVersion: v1
kind: Service
metadata:
  name: backofficeproductservice
  namespace: production
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    targetPort: 80
    protocol: TCP
  - name: https
    port: 443
    targetPort: 443
    protocol: TCP
  selector:
    app: productservice
---
apiVersion: v1
kind: Service
metadata:
  name: webshop-semih
  namespace: production
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    targetPort: 80
    protocol: TCP
  - name: https
    port: 443
    targetPort: 443
    protocol: TCP
  selector:
    app: webshopsemih-deployment
---
apiVersion: v1
kind: Service
metadata:
  name: webshop-dennis
  namespace: production
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    targetPort: 80
    protocol: TCP
  - name: https
    port: 443
    targetPort: 443
    protocol: TCP
  selector:
    app: webshopdennis-deployment
---
apiVersion: v1
kind: Service
metadata:
  name: backoffice
  namespace: production
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    targetPort: 80
    protocol: TCP
  - name: https
    port: 443
    targetPort: 443
    protocol: TCP
  selector:
    app: backoffice
---
apiVersion: v1
kind: Service
metadata:
  name: backofficeauthservice
  namespace: production
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    targetPort: 80
    protocol: TCP
  - name: https
    port: 443
    targetPort: 443
    protocol: TCP
  selector:
    app: backofficeauthservice
---
apiVersion: v1
kind: Service
metadata:
  name: wsinformationservice
  namespace: production
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    targetPort: 80
    protocol: TCP
  - name: https
    port: 443
    targetPort: 443
    protocol: TCP
  selector:
    app: wsinformationservice
---
apiVersion: v1
kind: Service
metadata:
  name: inventorymanagementservice
  namespace: production
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    protocol: TCP
  - name: https
    port: 443
    targetPort: 443
    protocol: TCP
  selector:
    app: inventorymanagementservice
---
apiVersion: v1
kind: Service
metadata:
  name: mongo
  namespace: production
spec:
  type: ClusterIP
  ports:
  - name: mongoport
    port: 27017
    targetPort: 27017
    protocol: TCP
  selector:
    app: mongo
---
apiVersion: v1
kind: Service
metadata:
  name: mongo-express
  namespace: production
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    targetPort: 8081
    protocol: TCP
  selector:
    app: mongo-express
---
apiVersion: cert-manager.io/v1alpha2
kind: ClusterIssuer
metadata:
  name: letsencrypt-production
spec:
  acme:
    email: doverdiek@gmail.com
    server: https://acme-v02.api.letsencrypt.org/directory
    privateKeySecretRef:
      # Secret resource used to store the account's private key.
      name: letsencrypt-production
    # Add a single challenge solver, HTTP01 using nginx
    solvers:
    - http01:
        ingress:
          class: nginx
---
# INGRESS
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: wiz-ingress
  namespace: production
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/use-regex: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-production"
spec:
  tls:
  - hosts:
    - api.overdiek.nl
    - overdiek.nl
    - www.overdiek.nl
    - webshop.semihsimsek.nl
    - webshop.overdiek.nl
    secretName: testcert
  rules:
  - host: api.overdiek.nl
    http:
      paths:
      - path: /backofficeproductservice/.*
        backend:
          serviceName: backofficeproductservice
          servicePort: 80
      - path: /inventorymanagementservice/.*
        backend:
          serviceName: inventorymanagementservice
          servicePort: 80
      - path: /wsinformationservice/.*
        backend:
          serviceName: wsinformationservice
          servicePort: 80
      - path: /backofficeauthservice/.*
        backend:
          serviceName: backofficeauthservice
          servicePort: 80
      - path: /mongo-express/.*
        backend:
          serviceName: mongo-express
          servicePort: 80
  - host: overdiek.nl
    http:
      paths:
      - path: /.*
        backend:
          serviceName: backoffice
          servicePort: 80
  - host: www.overdiek.nl
    http:
      paths:
      - path: /.*
        backend:
          serviceName: backoffice
          servicePort: 80
  - host: webshop.overdiek.nl
    http:
      paths:
      - path: /.*
        backend:
          serviceName: webshop-dennis
          servicePort: 80
  - host: webshop.semihsimsek.nl
    http:
      paths:
      - path: /.*
        backend:
          serviceName: webshop-semih
          servicePort: 80
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongovolume
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: imagesvolume
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi